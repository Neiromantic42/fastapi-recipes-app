# Импорт базового класса для создания схем данных,
# класс Field - для объявления параметров в схеме
from pydantic import BaseModel, Field


# Базовая схема книги рецептов, содержит общие поля, для избежания дублирования
class BaseCookBook(BaseModel):
    dish_name: str = Field(
        ...,  # Название блюда, требование - обязательный параметр
        title="Имя блюда целиком",  # Название поля в документации
        min_length=2,  # Минимальная длинна названия блюда
        max_length=100,  # Максимальная длинна названия блюда сто символов
    )

    cooking_time: int = Field(
        ...,  # Время приготовления блюда, обязательный параметр
        title="Время приготовления блюда",  # Название поля в документации
        ge=1,  # Минимально время приготовления минута
        le=960,  # Максимально время приготовления блюда 16 часов (холодец)
    )

    ingredients: str = Field(
        ...,  # Ингридиенты блюда, обязательный параметр
        title="Ингридиенты блюда (картошка, морковь, лук...)",  # Название поля
        min_length=5,  # Минимальная длинна ингредиентов 5 символов(хлеб)
        max_length=5000,  # Максимальная длинна ингредиентов
    )

    description_dish: str = Field(
        ...,  # Текстовое описание блюда
        title="Описание блюда (например: суп)",
        min_length=3,  # Минимальная длинна описания блюда например (суп)
        max_length=200,  # Максимальная длинна описания блюда
    )


# Схема, которую ожидаем получить в теле запроса (например, при POST-запросе)
class CookBookIn(BaseCookBook):
    pass  # Наследуем все поля от BaseBook без изменений


# Схема, которая будет возвращаться пользователю (например, в ответ на POST)
class CookBookOut(BaseCookBook):
    # Добавляем поле ID, которое создаётся автоматически при сохранении в БД
    id: int = Field(title="Уникальный идентификатор рецепта")
    # Добавляем поле счетчика просмотров
    views_counter: int = Field(
        title="Счетчик просмотров конкретного рецепта",
        description="Сколько раз открывали детальный рецепт",
        ge=0,  # Допустимое значение (больше или равно 0)
    )

    class Config:
        orm_mode = (
            True  # Включаем поддержку работы с ORM-объектами (SQLAlchemy)
        )


# Схема, которая будет возвращаться пользователю
class CookBookShort(BaseModel):
    dish_name: str = Field(title="Имя блюда целиком")  # Название поля в док
    # Добавляем поле счетчика просмотров
    views_counter: int = Field(
        title="Счетчик просмотров конкретного рецепта"
    )  # Название поля в документации
    # Добавляем поле время приготовления в минутах
    cooking_time: int = Field(
        title="Время приготовления блюда"
    )  # Название поля в документац
